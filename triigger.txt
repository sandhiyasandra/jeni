Creating Trigger in MySQL
You can create a trigger using the CREATE TRIGGER Statement.

Syntax
Following is the syntax of the MySQL CREATE TRIGGER Statement.

CREATE TRIGGER trigger_name
trigger_time trigger_event
ON table_name FOR EACH ROW
BEGIN
...
END;

Where,

trigger_name is the name of the trigger you need to create
trigger_time is the time of trigger activation
trigger_event can be INSERT, UPDATE, or DELETE. This event causes the trigger to be invoked.
table_name is the name of the table to which the trigger is associated with.



MySQL Before Insert Trigger

CREATE TABLE STUDENT(
   Name varchar(35),
   Age INT,
   Score INT,
   Grade CHAR(10)
);


DELIMITER //
CREATE TRIGGER sample_trigger 
BEFORE INSERT ON STUDENT FOR EACH ROW
BEGIN
IF NEW.Score < 35 THEN SET NEW.Grade = 'FAIL';
ELSE SET NEW.Grade = 'PASS';
END IF;
END //
DELIMITER ;

INSERT INTO STUDENT VALUES
('John', 21, 76, NULL),
('Jane', 20, 24, NULL),
('Rob', 21, 57, NULL),
('Albert', 19, 87, NULL);


-----------------------------------------------------------------------------------
MySQL - After Insert Trigger

CREATE TABLE USERS(
   ID INT AUTO_INCREMENT,
   NAME VARCHAR(100) NOT NULL,
   AGE INT NOT NULL,
   BIRTH_DATE VARCHAR(100),
   PRIMARY KEY(ID)
);

CREATE TABLE PUSH_NOTIFICATIONS(
   ID INT AUTO_INCREMENT,
   BIRTH_DATE VARCHAR(100),
   NOTIFICATIONS VARCHAR(255) NOT NULL,
   PRIMARY KEY(ID)
);

DELIMITER //
CREATE TRIGGER after_trigger AFTER INSERT ON USERS FOR EACH ROW
BEGIN
   IF NEW.BIRTH_DATE IS NOT NULL THEN
   INSERT INTO PUSH_NOTIFICATIONS VALUES
   (new.ID, new.BIRTH_DATE, CONCAT('Happy Birthday, ', NEW.NAME, '!'));
END IF;
END //
DELIMITER ;

INSERT INTO USERS (NAME, AGE, BIRTH_DATE) VALUES 
('Sasha', 23, '24/06/1999');
('Alex', 21, '12/01/2001');

-----------------------------------------------------------------------------------

before and after update

MariaDB [c416]> CREATE TABLE employees (
    ->     id INT PRIMARY KEY AUTO_INCREMENT,
    ->     name VARCHAR(100),
    ->     salary DECIMAL(10, 2)
    -> );
ERROR 1050 (42S01): Table 'employees' already exists
MariaDB [c416]>
MariaDB [c416]> drop table employees;
Query OK, 0 rows affected (0.027 sec)

MariaDB [c416]> CREATE TABLE employees (
    ->     id INT PRIMARY KEY AUTO_INCREMENT,
    ->     name VARCHAR(100),
    ->     salary DECIMAL(10, 2)
    -> );
Query OK, 0 rows affected (0.033 sec)

MariaDB [c416]>
MariaDB [c416]> CREATE TABLE salary_update_logs (
    ->     log_id INT PRIMARY KEY AUTO_INCREMENT,
    ->     employee_id INT,
    ->     old_salary DECIMAL(10, 2),
    ->     new_salary DECIMAL(10, 2),
    ->     update_time DATETIME
    -> );
Query OK, 0 rows affected (0.034 sec)

MariaDB [c416]> DELIMITER $$
MariaDB [c416]>
MariaDB [c416]> CREATE TRIGGER before_update_employee
    -> BEFORE UPDATE ON employees
    -> FOR EACH ROW
    -> BEGIN
    ->     -- Prevent salary decrease
    ->     IF NEW.salary < OLD.salary THEN
    ->         -- Revert the salary to the old value
    ->         SET NEW.salary = OLD.salary;
    ->     END IF;
    -> END$$
Query OK, 0 rows affected (0.022 sec)

MariaDB [c416]>
MariaDB [c416]> DELIMITER ;
MariaDB [c416]> DELIMITER $$
MariaDB [c416]>
MariaDB [c416]> CREATE TRIGGER after_update_employee
    -> AFTER UPDATE ON employees
    -> FOR EACH ROW
    -> BEGIN
    ->     -- Insert a log entry into the salary_update_logs table
    ->     INSERT INTO salary_update_logs (employee_id, old_salary, new_salary, update_time)
    ->     VALUES (OLD.id, OLD.salary, NEW.salary, NOW());
    -> END$$
Query OK, 0 rows affected (0.023 sec)

MariaDB [c416]>
MariaDB [c416]> DELIMITER ;
MariaDB [c416]> INSERT INTO employees (name, salary)
    -> VALUES ('Alice', 50000.00),
    ->        ('Bob', 45000.00);
Query OK, 2 rows affected (0.011 sec)
Records: 2  Duplicates: 0  Warnings: 0

MariaDB [c416]> -- Attempt to decrease Alice's salary
MariaDB [c416]> UPDATE employees
    -> SET salary = 40000
    -> WHERE name = 'Alice';
Query OK, 0 rows affected (0.012 sec)
Rows matched: 1  Changed: 0  Warnings: 0

MariaDB [c416]> -- Update Bob's salary
MariaDB [c416]> UPDATE employees
    -> SET salary = 47000
    -> WHERE name = 'Bob';
Query OK, 1 row affected (0.012 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [c416]> SELECT * FROM employees;
+----+-------+----------+
| id | name  | salary   |
+----+-------+----------+
|  1 | Alice | 50000.00 |
|  2 | Bob   | 47000.00 |
+----+-------+----------+
2 rows in set (0.001 sec)

MariaDB [c416]> SELECT * FROM salary_update_logs;
+--------+-------------+------------+------------+---------------------+
| log_id | employee_id | old_salary | new_salary | update_time         |
+--------+-------------+------------+------------+---------------------+
|      1 |           1 |   50000.00 |   50000.00 | 2024-11-15 12:27:21 |
|      2 |           2 |   45000.00 |   47000.00 | 2024-11-15 12:27:37 |
+--------+-------------+------------+------------+---------------------+
2 rows in set (0.000 sec)

----------------------------------------------------------------------------------
before and after delete


MariaDB [c416]> CREATE TABLE students (
    ->     student_id INT PRIMARY KEY AUTO_INCREMENT,
    ->     first_name VARCHAR(100),
    ->     last_name VARCHAR(100),
    ->     age INT,
    ->     enrollment_date DATE
    -> );
Query OK, 0 rows affected (0.034 sec)

MariaDB [c416]> CREATE TABLE deleted_students_log (
    ->     log_id INT PRIMARY KEY AUTO_INCREMENT,
    ->     student_id INT,
    ->     first_name VARCHAR(100),
    ->     last_name VARCHAR(100),
    ->     age INT,
    ->     deletion_time DATETIME
    -> );
Query OK, 0 rows affected (0.036 sec)

MariaDB [c416]> DELIMITER $$
MariaDB [c416]>
MariaDB [c416]> CREATE TRIGGER before_delete_student
    -> BEFORE DELETE ON students
    -> FOR EACH ROW
    -> BEGIN
    ->     -- Prevent deletion of students under 18
    ->     IF OLD.age < 18 THEN
    ->         SIGNAL SQLSTATE '45000'
    ->         SET MESSAGE_TEXT = 'Cannot delete student under 18 years old';
    ->     END IF;
    -> END$$
Query OK, 0 rows affected (0.021 sec)

MariaDB [c416]>
MariaDB [c416]> DELIMITER ;
MariaDB [c416]> DELIMITER $$
MariaDB [c416]>
MariaDB [c416]> CREATE TRIGGER after_delete_student
    -> AFTER DELETE ON students
    -> FOR EACH ROW
    -> BEGIN
    ->     -- Insert the deleted student's details into the log table
    ->     INSERT INTO deleted_students_log (student_id, first_name, last_name, age, deletion_time)
    ->     VALUES (OLD.student_id, OLD.first_name, OLD.last_name, OLD.age, NOW());
    -> END$$
Query OK, 0 rows affected (0.019 sec)

MariaDB [c416]>
MariaDB [c416]> DELIMITER ;
MariaDB [c416]> INSERT INTO students (first_name, last_name, age, enrollment_date)
    -> VALUES ('John', 'Doe', 20, '2022-09-01'),
    ->        ('Jane', 'Smith', 16, '2023-01-10'),
    ->        ('Alice', 'Johnson', 22, '2021-03-15');
Query OK, 3 rows affected (0.008 sec)
Records: 3  Duplicates: 0  Warnings: 0

MariaDB [c416]> -- Try to delete Jane Smith (age 16)
MariaDB [c416]> DELETE FROM students WHERE first_name = 'Jane' AND last_name = 'Smith';
ERROR 1644 (45000): Cannot delete student under 18 years old
MariaDB [c416]> -- Delete John Doe (age 20)
MariaDB [c416]> DELETE FROM students WHERE first_name = 'John' AND last_name = 'Doe';
Query OK, 1 row affected (0.012 sec)

MariaDB [c416]> SELECT * FROM students;
+------------+------------+-----------+------+-----------------+
| student_id | first_name | last_name | age  | enrollment_date |
+------------+------------+-----------+------+-----------------+
|          2 | Jane       | Smith     |   16 | 2023-01-10      |
|          3 | Alice      | Johnson   |   22 | 2021-03-15      |
+------------+------------+-----------+------+-----------------+
2 rows in set (0.001 sec)

MariaDB [c416]> SELECT * FROM deleted_students_log;
+--------+------------+------------+-----------+------+---------------------+
| log_id | student_id | first_name | last_name | age  | deletion_time       |
+--------+------------+------------+-----------+------+---------------------+
|      1 |          1 | John       | Doe       |   20 | 2024-11-15 12:31:20 |
+--------+------------+------------+-----------+------+---------------------+
1 row in set (0.001 sec)
